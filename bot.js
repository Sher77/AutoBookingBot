require('dotenv').config();
const mongoose = require('mongoose');
const {
  pickDriverCallback,
  cancelReservationCallback,
} = require('./callbacks/callbacks.js');
const { v4: uuidv4 } = require('uuid');

const { showHelp } = require('./utils/utils.js');

const { InlineKeyboard, session } = require('grammy');

const { Driver, UserReservation } = require('./database/models.js');
const { commands } = require('./commands.js');

const startBot = (bot) => {
  bot.command('start', async (ctx) => {
    await ctx.reply(`
      –ü—Ä–∏–≤–µ—Ç —è AutoBookingBot! üëã

      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç –≤ –º–∞—à–∏–Ω–µ. üöó

      –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:
      - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ
      - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π
      - –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å

      –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∏ –º—ã –ø–æ–º–æ–∂–µ–º!

      –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!
      
      `);
  });

  bot.command('help', async (ctx) => {
    showHelp(ctx);
  });

  bot.use(session({ initial: () => ({ step: 0, driverData: {} }) }));

  bot.command('my_reservations', async (ctx) => {
    try {
      const reservations = await UserReservation.find();

      const seatMapping = {
        front: '—Å–ø–µ—Ä–µ–¥–∏',
        left: '—Å–ª–µ–≤–∞',
        center: '–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ',
        right: '—Å–ø—Ä–∞–≤–∞',
      };

      let response = '';

      for (const reservation of reservations) {
        const driver = await Driver.findOne({ driverId: reservation.driverId });

        if (driver) {
          response += `–í–æ–¥–∏—Ç–µ–ª—å: ${driver.name}\n–ú–∞—à–∏–Ω–∞: ${
            driver.car
          }\n–ú–µ—Å—Ç–æ: ${seatMapping[reservation.seat]}\n\n`;
        } else {
          console.log(
            '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å driverId:',
            reservation.driverId
          );
        }
      }

      if (response) {
        await ctx.reply(`–°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π:\n\n ${response}`);
      } else {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
    }
  });

  bot.command('show_drivers', async (ctx) => {
    try {
      const drivers = await Driver.find();
      const driverList = drivers
        .map(
          (driver) =>
            `–ò–º—è: ${driver.name},\n–¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone},\n–ú–∞—à–∏–Ω–∞: ${driver.car}, \n–í–æ–∑—Ä–∞—Å—Ç: ${driver.age}`
        )
        .join('\n\n');

      if (driverList.length === 0) {
        return ctx.reply(
          '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π >_<'
        );
      }

      await ctx.reply(`–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n${driverList}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
    }
  });

  bot.command('book', async (ctx) => {
    const drivers = await Driver.find();

    const driversWithFreeSeats = drivers.filter((driver) => {
      return (
        driver.seats.front ||
        driver.seats.left ||
        driver.seats.center ||
        driver.seats.right
      );
    });

    if (driversWithFreeSeats.length === 0) {
      await ctx.reply(
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏.'
      );
      return;
    }

    const driversKeyboard = new InlineKeyboard();

    driversWithFreeSeats.forEach((driver) => {
      driversKeyboard
        .text(driver.name, `picked_driver_${driver.driverId}`)
        .row();
    });

    const message = await ctx.reply('–í–æ–¥–∏—Ç–µ–ª–∏ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏: ', {
      reply_markup: driversKeyboard,
    });

    ctx.session.lastMessageId = message.message_id;
  });

  bot.command('cancel_reservation', async (ctx) => {
    const userId = ctx.from.id;

    const reservations = await UserReservation.find({ userId });

    if (reservations.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.');
    }

    const seatMapping = {
      front: '—Å–ø–µ—Ä–µ–¥–∏',
      left: '—Å–ª–µ–≤–∞',
      center: '–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ',
      right: '—Å–ø—Ä–∞–≤–∞',
    };

    const cancelKeyboard = new InlineKeyboard();

    for (const reservation of reservations) {
      const driver = await Driver.findOne({ driverId: reservation.driverId });

      if (driver) {
        cancelKeyboard
          .text(
            `–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å ${seatMapping[reservation.seat]} —É ${driver.name}`,
            `cancel_${reservation._id}`
          )
          .row();
      } else {
        cancelKeyboard
          .text(
            `–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å ${
              seatMapping[reservation.seat]
            } —É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è`,
            `cancel_${reservation._id}`
          )
          .row();
      }
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã: ', {
      reply_markup: cancelKeyboard,
    });
  });

  bot.on('callback_query:data', async (ctx) => {
    const data = ctx.callbackQuery.data;

    cancelReservationCallback(data, ctx);

    pickDriverCallback(data, ctx);
  });

  bot.command('become_a_driver', async (ctx) => {
    await ctx.reply(
      '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤!'
    );

    ctx.session.step = 1;
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
  });

  bot.on(':text', async (ctx) => {
    const text = ctx.message.text;

    if (ctx.session.step === 1) {
      ctx.session.driverData.name = text;
      ctx.session.step = 2;
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–∞—à–∏–Ω—É: ');
    }

    if (ctx.session.step === 2) {
      ctx.session.driverData.car = text;
      ctx.session.step = 3;
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
    }

    if (ctx.session.step === 3) {
      const driver = await Driver.findOne({ phone: text });

      if (driver) {
        ctx.session.step === 2;

        return ctx.reply(
          '–í–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:'
        );
      }

      ctx.session.driverData.phone = text;
      ctx.session.step = 4;
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:');
    }

    if (ctx.session.step === 4) {
      const age = parseInt(text, 10);

      if (isNaN(age)) {
        return ctx.reply('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: ');
      }

      ctx.session.driverData.age = age;
      ctx.session.driverData.driverId = uuidv4();

      const newDriver = new Driver(ctx.session.driverData);
      await newDriver.save();

      ctx.reply('–í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
      ctx.session.step = 0;
      ctx.session.driverData = {};
    }

    if (ctx.session.step === 'update_driver_info') {
      await ctx.reply('clksjcds');
    }
  });

  bot.api.setMyCommands(commands);

  bot.start();
};

module.exports = { startBot };
